// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

// Looking for ways to speed up your queries, or scale easily with your serverless or edge functions?
// Try Prisma Accelerate: https://pris.ly/cli/accelerate-init

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
  //directUrl = env("DIRECT_URL")
}

model User {
  id              String    @id @default(cuid())
  username        String    @unique
  email           String    @unique
  password        String
  name            String?
  bio             String?
  createdAt       DateTime  @default(now())
  updatedAt       DateTime  @updatedAt
  bids            Bid[]
  auctions        Auction[]
  wonAuctions     Winner[]
  reviewsGiven    Review[]  @relation("ReviewGiver")
  reviewsReceived Review[]  @relation("ReviewReceiver")
  sessions        Session[]
}

model Session {
  id          String   @id @unique @db.VarChar()
  activeFrom  DateTime @default(now())
  activeUntil DateTime @default(dbgenerated("CURRENT_TIMESTAMP + interval '1 day'"))
  user        User     @relation(fields: [userId], references: [id])
  userId      String
}

model Auction {
  id           String        @id @default(cuid())
  title        String
  description  String
  startPrice   Float
  currentPrice Float
  startDate    DateTime      @default(now())
  endDate      DateTime
  image        String?
  createdAt    DateTime      @default(now())
  updatedAt    DateTime      @updatedAt
  status       AuctionStatus @default(ACTIVE)
  seller       User          @relation(fields: [sellerId], references: [id])
  sellerId     String
  category     Category      @relation(fields: [categoryId], references: [id])
  categoryId   String
  bids         Bid[]
  winner       Winner?
}

model Bid {
  id        String   @id @default(cuid())
  amount    Float
  createdAt DateTime @default(now())
  user      User     @relation(fields: [userId], references: [id])
  userId    String
  auction   Auction  @relation(fields: [auctionId], references: [id], onDelete: Cascade)
  auctionId String
}

model Category {
  id       String    @id @default(cuid())
  name     String    @unique
  auctions Auction[]
}

model Winner {
  id         String   @id @default(cuid())
  createdAt  DateTime @default(now())
  auction    Auction  @relation(fields: [auctionId], references: [id])
  auctionId  String   @unique
  user       User     @relation(fields: [userId], references: [id])
  userId     String
  finalPrice Float
}

model Review {
  id         String   @id @default(cuid())
  rating     Int
  content    String
  createdAt  DateTime @default(now())
  updatedAt  DateTime @updatedAt
  reviewer   User     @relation("ReviewGiver", fields: [reviewerId], references: [id])
  reviewerId String
  reviewee   User     @relation("ReviewReceiver", fields: [revieweeId], references: [id])
  revieweeId String
}

enum AuctionStatus {
  ACTIVE
  ENDED
  CANCELLED
}
